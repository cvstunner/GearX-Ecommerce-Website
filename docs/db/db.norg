* users
    @code sql

    CREATE TABLE users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        fullname VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL UNIQUE,
        phone VARCHAR(20),
        password VARCHAR(255) NOT NULL,
        disabled BOOLEAN DEFAULT FALSE, 
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );

    INSERT INTO users (fullname, email, phone, password) 
    VALUES (
      'Chetan Shigvan', 
      'chetanshigwan789@gmail.com', 
      '8928981257', 
      'hashed_password'
    );

    UPDATE users SET 
      fullname = 'Johnathan Doe', 
      email = 'johnathan.doe@example.com', 
      phone = '0987654321', 
      password = 'new_hashed_password', 
      WHERE id = 1;

    @end


* categories
    @code sql

    CREATE TABLE categories (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(255) NOT NULL
    );

    INSERT INTO categories (name) VALUES 
      ('Keyboards'),
      ('Monitors'),
      ('Storage'),
      ('Audio'),
      ('Others');

      @end


* products 
    @code sql

    CREATE TABLE products (
      id INT AUTO_INCREMENT PRIMARY KEY,    
      slug VARCHAR(255) UNIQUE NOT NULL,
      name VARCHAR(255) NOT NULL,    
      description TEXT,    
      category_id INT NOT NULL,    
      price INT NOT NULL,    
      mrp INT NOT NULL,    
      rating DECIMAL(3, 2) DEFAULT 0.0,    
      shipping BOOLEAN DEFAULT TRUE,    
      disabled BOOLEAN DEFAULT FALSE,    
      picture VARCHAR(255),    
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,    
      FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
    ); 

    CREATE INDEX idx_slug ON products(slug);

    INSERT INTO products (slug, name, description, category_id, price, mrp, rating, shipping, disabled, picture) values (   
      'mechanical-keyboard',    
      'mechanical keyboard',    
      'a high-quality mechanical keyboard with rgb lighting.',    
      1,             
      999,      
      1299,            
      4.5,  
      true, 
      false, 
      'mechanical-keyboard.png' 
    );

      @end

* wishlist
    @code sql

    CREATE TABLE wishlist (
      id INT AUTO_INCREMENT PRIMARY KEY,
      user_id INT NOT NULL,                      
      product_id INT NOT NULL,                     
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
      UNIQUE KEY unique_wishlist (user_id, product_id),
      FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
      FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
    );

    CREATE INDEX idx_user_id ON wishlist(user_id);
    CREATE INDEX idx_product_id ON wishlist(product_id);

      @end

* cart
    @code sql

    CREATE TABLE cart (
      id INT AUTO_INCREMENT PRIMARY KEY,
      user_id INT NOT NULL,
      product_id INT NOT NULL,
      quantity INT DEFAULT 1,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
      FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
    );

    CREATE INDEX idx_user_id ON cart(user_id);
    CREATE INDEX idx_product_id ON cart(product_id);

    INSERT INTO cart (user_id, product_id, quantity)
    VALUES (1, 1, 2);

      @end

* orders
    @code sql

    CREATE TABLE orders (
      id INT AUTO_INCREMENT PRIMARY KEY,
      user_id INT NOT NULL,
      status ENUM('pending', 'processing', 'shipped', 'delivered', 'cancelled') NOT NULL DEFAULT 'pending',
      total_amount DECIMAL(10, 2) NOT NULL,
      address TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    );

    CREATE INDEX idx_user_id ON orders(user_id);

    INSERT INTO orders (user_id, status, total_amount, address)
    VALUES (1, 'pending', 3297, '123 Main St, Springfield, IL');

    UPDATE orders
    SET status = 'shipped'
    WHERE order_id = 1;


    -- Order with Product Details
    SELECT oi.id, p.name, oi.quantity, oi.price
    FROM order_items oi
    JOIN products p ON oi.product_id = p.id
    WHERE oi.order_id = 1;

      @end

* order_items
    @code sql

    CREATE TABLE order_items (
      id INT AUTO_INCREMENT PRIMARY KEY,
      order_id INT NOT NULL,
      product_id INT NOT NULL,
      quantity INT DEFAULT 1,
      price INT NOT NULL,
      FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
      FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
    );

    CREATE INDEX idx_order_id ON order_items(order_id);
    CREATE INDEX idx_product_id ON order_items(product_id);

    INSERT INTO order_items (order_id, product_id, quantity, price)
    VALUES (1, 1, 2, 999), (1, 2, 1, 1299);

      @end


